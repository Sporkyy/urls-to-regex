{"version":3,"sources":["ColorModeSwitcher.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","App","useState","combo","setCombo","strIn","setStrIn","useDebounce","value","errors","setErrors","theme","gap","align","p","justifySelf","as","ResizeTextarea","resize","onKeyUp","e","str","target","arr","split","regex","condense","url","validUrl","isWebUri","length","push","console","log","findErrors","source","bg","map","idx","sx","overflowWrap","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iQAIaA,EAAoB,SAAAC,GAC/B,IAAQC,EAAoBC,cAApBD,gBACFE,EAAOC,YAAkB,OAAQ,SACjCC,EAAaD,YAAkBE,IAAQC,KAE7C,OACE,cAAC,IAAD,aACEC,KAAK,KACLC,SAAS,KACTC,aAAA,oBAAyBP,EAAzB,SACAQ,QAAQ,QACRC,MAAM,UACNC,WAAW,IACXC,QAASb,EACTc,KAAM,cAACV,EAAD,KACFL,K,0CCwDKgB,MA5Cf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAgBC,YAAYJ,EAAO,KAA5BK,EAAP,oBACA,EAA4BN,mBAAS,IAArC,mBAAOO,EAAP,KAAeC,EAAf,KAEA,OACE,cAAC,IAAD,CAAgBC,MAAOA,QAAvB,SACE,eAAC,IAAD,CAAQC,IAAK,EAAGC,MAAM,UAAUC,EAAG,EAAnC,UACE,cAAC,EAAD,CAAmBC,YAAY,aAC/B,cAAC,IAAD,CACEC,GAAIC,IACJC,OAAO,OACPC,QAAS,SAAAC,GACP,IAAMC,EAAMD,EAAEE,OAAOd,MACrBF,EAASe,GACT,IAAME,EAAMF,EAAIG,MAAM,MAChBC,EAAQC,mBAASH,IAxChB,SAACA,EAAKb,GACvB,IADqC,EAC/BD,EAAS,GADsB,cAEnBc,GAFmB,IAErC,2BAAuB,CAAC,IAAbI,EAAY,QAChBC,IAASC,SAASF,GAOY,MAAxBA,EAAIA,EAAIG,OAAS,IAC1BrB,EAAOsB,KACL,qCACE,iCAASJ,IACT,8DAVJlB,EAAOsB,KACL,qCACE,iCAASJ,IACT,8DAP6B,8BAmBrCK,QAAQC,IAAIxB,GACZC,EAAUD,GAqBAyB,CAAWX,EAAKb,GAChBN,EAAS,IAAD,OAAKqB,EAAMU,OAAX,WAGT9B,EAAMyB,UAAYrB,EAAOqB,QAC1B,cAAC,IAAD,CAAKhB,EAAE,IAAIsB,GAAG,MAAMvC,MAAM,QAA1B,SACE,6BACGY,EAAO4B,KAAI,SAACjB,EAAGkB,GAAJ,OACV,6BAAelB,GAANkB,UAKjB,cAAC,IAAD,CACEF,GAAG,gBACHvC,MAAM,SACNiB,EAAE,IACFyB,GAAI,CAAEC,aAAc,YAJtB,SAMGhC,UCxDIiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKMQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,eAAC,aAAD,WACE,cAAC,IAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,YClH5BzB,M","file":"static/js/main.a8bd000c.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React, { useState } from 'react';\nimport { ChakraProvider, Box, theme, Textarea, VStack } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport { condense } from 'strings-to-regex';\nimport { useDebounce } from 'use-debounce';\nimport ResizeTextarea from 'react-textarea-autosize';\nimport validUrl from 'valid-url';\n\nconst findErrors = (arr, setErrors) => {\n  const errors = [];\n  for (const url of arr) {\n    if (!validUrl.isWebUri(url)) {\n      errors.push(\n        <>\n          <strong>{url}</strong>\n          <em> is not a valid web URI</em>\n        </>\n      );\n    } else if (url[url.length - 1] !== '/') {\n      errors.push(\n        <>\n          <strong>{url}</strong>\n          <em> does not end in a slash</em>\n        </>\n      );\n    }\n  }\n  console.log(errors);\n  setErrors(errors);\n};\n\nfunction App() {\n  const [combo, setCombo] = useState('');\n  const [strIn, setStrIn] = useState('');\n  const [value] = useDebounce(combo, 500);\n  const [errors, setErrors] = useState([]);\n\n  return (\n    <ChakraProvider theme={theme}>\n      <VStack gap={3} align=\"stretch\" p={3}>\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\n        <Textarea\n          as={ResizeTextarea}\n          resize=\"none\"\n          onKeyUp={e => {\n            const str = e.target.value;\n            setStrIn(str);\n            const arr = str.split('\\n');\n            const regex = condense(arr);\n            findErrors(arr, setErrors);\n            setCombo(`^${regex.source}$`);\n          }}\n        />\n        {!!strIn.length && !!errors.length && (\n          <Box p=\"3\" bg=\"red\" color=\"white\">\n            <ul>\n              {errors.map((e, idx) => (\n                <li key={idx}>{e}</li>\n              ))}\n            </ul>\n          </Box>\n        )}\n        <Box\n          bg=\"rebeccapurple\"\n          color=\"yellow\"\n          p=\"3\"\n          sx={{ overflowWrap: 'anywhere' }}\n        >\n          {value}\n        </Box>\n      </VStack>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}